% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/update-factors.R
\name{update-factors}
\alias{update-factors}
\alias{update_factors_ui}
\alias{update_factors_server}
\title{Module to Reorder the Levels of a Factor Variable}
\usage{
update_factors_ui(id)

update_factors_server(id, data_r = reactive(NULL))
}
\arguments{
\item{id}{Module ID.}

\item{data_r}{A \code{\link[shiny:reactive]{shiny::reactive()}} function returning a \code{data.frame}.}
}
\value{
A \code{\link[shiny:reactive]{shiny::reactive()}} function returning the data.
}
\description{
This module contain an interface to reorder the levels of a factor variable.
}
\examples{

library(shiny)
library(datamods)
library(ggplot2)
library(stringr)

ui <- fluidPage(
  theme = bslib::bs_theme(version = 5L, preset = "bootstrap"),
  tags$h2("Reorder the Levels of a Factor"),
  fluidRow(
    column(
      width = 6,
      update_factors_ui("id")
    ),
    column(
      width = 6,
      verbatimTextOutput("code")
    )
  )
)

server <- function(input, output, session) {
  
  rv <- reactiveValues(data = MASS::Cars93[c(1, 2, 3, 9, 10, 11, 16, 26, 27)]) 
  
  data_inline_r <- update_factors_server(
    id = "id",
    data_r = reactive(rv$data)
  )
  observeEvent(data_inline_r(), rv$data <- data_inline_r())
  
  # Show result
  output$code <- renderPrint({
    data <- req(rv$data)
    data \%>\% str()
  })
}

if (interactive())
  shinyApp(ui, server)
}
